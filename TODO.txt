Game Code Features:
- allow users to name states and then test for them:
	template=torch flammable
		; note: no rooms
		.defaults weight=250 value=1 hitpoints=3 damage=1 state=.unlit
		.lit	  default torch_lit flags=light
		.unlit    default torch_unlit
		.doused   weight=300 value=0 hitpoints=1 damage=1 torch_doused
- Use verb/syntax specific ignore word globbing, e.g.
    light {the} N1 {w|with|from|using|by} N2
- Make sure there is a term/expression for "this room"
- Allow omission of "syntax=verb none"
- Simplify emotes

Implementation:
- replace 'sex' with gender
- memory allocation
- use skip functions instead of replace
- bools
- eliminate warnings
- implement "isa" object flag:
	object=torch523 isa=torch
		firstroom
- implement inline synonyms in lang.txt (documented as [syns=...] but make it aliases, please)
- implement "usage=" in lang.txt (inline documentation for help)

Done in the .txt files, these need converting in code,
but also they need some better names; perhaps '$x' would
be better and more consistent for those that are builtins.

"travel -> .travel
"magsleep -> .magsleep
"rankX -> .rankX
"greet -> .greet
"boot -> .boot
"pre-magic -> .pre-magic
"start -> .start

- Check EXPECT_ERROR(EINVALs and make sure we're testing individual
  invalid values rather than possible occlusions.

- Normlize 'number of entry' value in structs to counts, size, or length
- Replace C&A with a simpler VM model,
- Replace negative actions (rooms) with a GOTO instruction,
- Use [] instead of *ptr,
- Collapse multiple files into single file with compound records,
- Leverage "write-reserve" model to populate partial records:
	size_t size = 0;
	size_t countPosn = ftell(ofp);
	fwrite(&size, sizeof(count), ofp);
	readEntry();
	size = sizeOfData();
	frewriteAt(countPosn, &size, sizeof(size), ofp);
- replace _TT_ENT with { verb, vtab }
- rename "task" -> "goal" or "achievement"
